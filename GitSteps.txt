
Basics

1. Create a folder
2. Navigate to that folder in terminal
3.
  'git init'
  This will convert a local folder into a local git repository.
4. Now add files, or create a project.
5. There are 3 states in git.
  a. Untracked (All modified files which are not added staging. Files in this state will not be committed.)
  b. Staging (This state holds a copy of files that are ready to be committed. This copy will not be changed even if the original file is changed. To reflect the changes, you have to re-add them)
  c. Commited (Committed means the local files are same as that of in the repo.)

-----------------------------------------------------------------------

Commit Types

1. Checkout Commit: (safe) Go back to a previous revision in read only form. Cannot modify the code(This is to preserve the commit history).
      Commands:
            a. 'git checkout <revision number>'
                  Switches to a previously committed revision.
            b. 'git checkout master'
                  Switches back to latest commit

2. Revert Commit: (medium risk) This creates a new commit with reverting changes from a specified commit in history.
      Commads:
            'git revert <revision number to revert>'
                  Creates a new commit discarding the changes of specified commit.

3. Reset Commit: (dangerous) This resets back to revision in history. This will remove all intermediate commits made from that point till today
      Commands:
            a. 'git reset <revision to revert back to>'
                  This will revert back to a previous commit. But will not change the files in local repo. All the changes made after that commit will stay as unchanged. This step can be used to combine a few previous commits and combine it as one.
            b. 'git reset <revision to revert back to> --hard'
                  Similar to first command; But presence of '--hard' means hard reset. ie, local files WILL be changed to that previous version.

-----------------------------------------------------------------------
General Commands
  a. 'git status'
        Displays all files in Untracked & Staging area.
  b. 'git add index.html'
        Adds a specific file to Staging
  c. 'git rm --cached index.html'
        Removes a specific file from Staging
  d. 'git add .'
        Adds all Untracked files in the current folder to Staging
  e. 'git commit -m "THis is a commit message" '
        Commits all files in staging
  f. 'git clone <git URI>'
        Git URI is found in github page. Clones a repo to local directory. Git origin will also be set automatically
  g. 'git remote add origin <git URI>'
        Adds origin to a local repo.
  g. 'git push origin <branchname>' OR 'git push <git URI> <branchname>'
        Commits a specific branch to Github. This works only if you added git origin first. You have to input username & password.

-----------------------------------------------------------------------

  f. 'git checkout -- index.html'
        Reverts an Untracked file to same copy in commited or in staging.
  g. 'git log'
        Displays logs of all commits.
  h. 'git log --oneline'
        Displays short version of all logs


Basics

1. Create a folder
2. Navigate to that folder in terminal
3.
  'git init'
  This will convert a local folder into a local git repository.
4. Now add files, or create a project.
5. There are 3 states in git.
  a. Untracked (All modified files which are not added staging. Files in this state will not be committed.)
  b. Staging (This state holds a copy of files that are ready to be committed. This copy will not be changed even if the original file is changed. To reflect the changes, you have to re-add them)
  c. Commited (Committed means the local files are same as that of in the repo.)

-----------------------------------------------------------------------

Commit Types

1. Checkout Commit: (safe) Go back to a previous revision in read only form. Cannot modify the code(This is to preserve the commit history).
      Commands:
            a. 'git checkout <revision number>'
                  Switches to a previously committed revision.
            b. 'git checkout master'
                  Switches back to latest commit

2. Revert Commit: (medium risk) This creates a new commit with reverting changes from a specified commit in history.
      Commads:
            'git revert <revision number to revert>'
                  Creates a new commit discarding the changes of specified commit.

3. Reset Commit: (dangerous) This resets back to revision in history. This will remove all intermediate commits made from that point till today
      Commands:
            a. 'git reset <revision to revert back to>'
                  This will revert back to a previous commit. But will not change the files in local repo. All the changes made after that commit will stay as unchanged. This step can be used to combine a few previous commits and combine it as one.
            b. 'git reset <revision to revert back to> --hard'
                  Similar to first command; But presence of '--hard' means hard reset. ie, local files WILL be changed to that previous version.

-----------------------------------------------------------------------
General Commands
  a. 'git status'
        Displays all files in Untracked & Staging area.
  b. 'git add index.html'
        Adds a specific file to Staging
  c. 'git rm --cached index.html'
        Removes a specific file from Staging
  d. 'git add .'
        Adds all Untracked files in the current folder to Staging
  e. 'git commit -m "THis is a commit message" '
        Commits all files in staging
  f. 'git clone <git URI>'
        Git URI is found in github page. Clones a repo to local directory. Git origin will also be set automatically
  g. 'git remote add origin <git URI>'
        Adds an alias 'origin' for specified git URI to a local repo.
  h. 'git push origin <branch name>'
        Commits a specific branch to Github. This works only if you added git origin first. You have to input username & password.

-----------------------------------------------------------------------

  i. 'git checkout -- index.html'
        Reverts an Untracked file to same copy in commited or in staging.
  j. 'git log'
        Displays logs of all commits.
  k. 'git log --oneline'
        Displays short version of all logs


-----------------------------------------------------------------------


Branches
      Code that is stable and available to everyone is the master branch.
      In case if you want to add a new feature, you create a branch from master and start working on it.
      Once the feature is completed & tested, you can merge it back the master.

      Steps:
      1. Create a branch.
      2. Switch to that branch using checkout command
      3. Make Changes.
      4. Add to Staging & Commit.
      5. Switch to master branch using checkout command
      6. Merge branches to master
      7. If conflict, resolve it manually. Then add to staging & commit.

      Commands:
        'git branch <branch name>'
            Creates a new branch with given name only. Should manually checkout after this.
        'git checkout -b <branch name>'
            Creates a branch and Checks out.
        'git branch' OR  'git branch -a'
            List all branches. '-a' means ALL; Shows remote branches also.
        'git branch -d <branchname>' OR 'git branch -D <branchname>'
            Deletes a branch. '-d' means deleted only if merged. '-D' means delete anyway.
        'git merge <branchname>'
            merges a branch to master. Do this only after checking out master.


-------------------------------------------------------------------------

Pull
      'git pull origin master'
            Updating local repo with latest changes in remote repo.
            Run 'master checkout' before this.
Pull Request (means merge request )
      A person can checkout a branch from master. If they want to merge it to master branch, they can create a pull request.
      The master brach owner get a notification about this, they can review and merge or reject.


------------------------------------------------------------------------------

Fork
      Contributing to an open source project.
      Go to that repo, fork it. A copy of that project will be added to your gitHub account.
      Now you can clone it and modify it.
      Add, Commit & push
      Then come back to your github page & create a pull request.
      The original owner will recieve a pull request. They will verify & accept.



